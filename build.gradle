//file:noinspection SpellCheckingInspection
//file:noinspection GroovyAssignabilityCheck

import io.pzstorm.capsid.setup.VmParameter
import io.pzstorm.capsid.setup.xml.LaunchRunConfig

plugins {
    id 'io.pzstorm.capsid' version '0.4.2'

    // https://docs.gradle.org/current/userguide/application_plugin.html
    id 'application'

    // https://docs.gradle.org/current/userguide/publishing_maven.html
    id 'maven-publish'

    // https://docs.gradle.org/current/userguide/signing_plugin.html
    id 'signing'

    // https://plugins.gradle.org/plugin/com.diffplug.spotless
    id "com.diffplug.spotless" version "5.12.1"

    // https://plugins.gradle.org/plugin/io.github.gradle-nexus.publish-plugin
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}
apply from: 'publish.gradle'

// is gradle executing on CI server?
String sIsCI = System.getenv("CI") ?: project.ext.has('CI') ? project.ext.get('CI') : null
boolean isCI = sIsCI != null ? Boolean.parseBoolean(sIsCI) : false

allprojects {
    repositories { mavenCentral() }
    project.ext.set('CI', isCI)
    group 'io.github.pzstorm'
    version '0.2.1'
}

// make sure to configure zombie subproject first because other
// subprojects depend on including it's sourceset output
subprojects.sort {
    return it.name == 'zombie' ? 0 : 1
}.each {
    it.apply plugin: 'java'
    it.apply plugin: 'maven-publish'
    it.apply plugin: 'com.diffplug.spotless'

    it.java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(17))
        }
    }
    // declare dependencies common to all subprojects
    it.dependencies {
        // https://mvnrepository.com/artifact/com.google.code.findbugs/jsr305
        compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

        // https://mvnrepository.com/artifact/org.jetbrains/annotations
        compileOnly 'org.jetbrains:annotations:20.1.0'
    }
}
def mainProjects = [ project(':storm-api'), project(':storm-core') ]
mainProjects.each {
    // assemble project jars in root build directory
    it.jar.getDestinationDirectory().set(new File(buildDir, 'libs'))
}

// exclude configurations from distribution
configurations {
    excludeFromDist.extendsFrom(zomboidImplementation, zomboidRuntimeOnly)
}

// these dependencies will be included as libraries in distribution
dependencies {
    // https://mvnrepository.com/artifact/com.google.guava/guava
    runtimeOnly('com.google.guava:guava:30.1.1-jre') {
        exclude group: 'com.google.code.findbugs'
        exclude group: 'com.google.errorprone'
        exclude group: 'org.checkerframework'
        exclude module: 'failureaccess'
        exclude module: 'listenablefuture'
        exclude module: 'j2objc-annotations'
    }
    // https://mvnrepository.com/artifact/org.ow2.asm/asm
    runtimeOnly 'org.ow2.asm:asm:9.1'

    // https://mvnrepository.com/artifact/org.ow2.asm/asm-tree
    runtimeOnly 'org.ow2.asm:asm-tree:9.1'

    // https://mvnrepository.com/artifact/org.ow2.asm/asm-util
    runtimeOnly 'org.ow2.asm:asm-util:9.1'

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    runtimeOnly 'org.apache.logging.log4j:log4j-core:2.14.0'
}

capsid {
    isModProject = false
    setProjectRepository('pzstorm', 'storm')
}

sourceSets {
    // remove media sourceSet created by capsid
    def mediaSourceSet = sourceSets.findByName('media')
    if (mediaSourceSet != null) {
        remove(mediaSourceSet)
    }
}

tasks.createRunConfigurations.configure {
    actions.clear()
    doLast {
        def vmParameterBuilder = new VmParameter.Builder()
        def os = org.gradle.internal.os.OperatingSystem.current()
        if (os == org.gradle.internal.os.OperatingSystem.LINUX) {
            vmParameterBuilder = vmParameterBuilder
                    .withJavaLibraryPaths(gameDir as String, "${gameDir}/linux64" as String, "${gameDir}/jre64/lib/amd64" as String)
                    .withLwjglLibraryPaths(gameDir)
        } else if(os == org.gradle.internal.os.OperatingSystem.WINDOWS) {
            vmParameterBuilder = vmParameterBuilder
                    .withJavaLibraryPaths(gameDir as String, "${gameDir}/win64" as String, "${gameDir}/jre64/lib" as String)
                    .withLwjglLibraryPaths(gameDir)
        }
        //@formatter:off
        LaunchRunConfig launchStorm = new LaunchRunConfig(
                "Launch Storm", "io.pzstorm.storm.core.StormLauncher",
                vmParameterBuilder, [
                Main: new File(file(gameDir), "logs/storm/main.log").toPath() ,
                Debug: new File(file(gameDir), "logs/storm/debug.log").toPath()] as Map
        )//@formatter:on
        launchStorm.vmParamBuilder.build()
        launchStorm.configure(getProject()).writeToFile()
    }
}

jar {
    // include modules classes and resources in jar
    mainProjects.each {
        from(new File(it.buildDir, 'classes/java/main'), new File(it.buildDir, 'resources/main'))
    }
}

distributions.main {
    distributionBaseName.set("storm-${zomboidVersion}")
    contents {
        it.from('README.md', 'LICENSE', 'CHANGELOG.md')
        it.exclude {
            File file = it.file
            if (!isCI) {
                // exclude Project Zomboid classes
                if (file in configurations.excludeFromDist.files) {
                    return true
                }
                // exclude Project Zomboid libraries
                if (file.toPath().startsWith(gameDir)) {
                    return true
                }
            }
            return false
        }
        // include additional distibution files
        it.from 'dist'

        // exclude generated launch scripts
        it.exclude '**/storm', '**/storm.bat'
    }
}

publishing {
    publications {
        coreMavenJava(MavenPublication) {
            from project(':storm-core').components.java
            artifactId project(':storm-core').jar.archiveBaseName.get()
            pom {
                name = 'Zomboid Storm Core'
                description = 'Project Zomboid Storm Implementation'
                url = 'https://github.com/pzstorm/storm'
                scm {
                    connection = 'scm:git:git://github.com/pzstorm/storm.git'
                    developerConnection = 'scm:git:ssh://github.com:pzstorm/storm.git'
                    url = 'https://github.com/pzstorm/storm'
                }
                licenses {
                    license {
                        name = 'GNU General Public License v3.0'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.en.html'
                    }
                }
                developers {
                    developer {
                        id = 'yooksi'
                        name = 'Matthew Cain'
                        email = 'yooks@tuta.io'
                    }
                }
            }
        }
        apiMavenJava(MavenPublication) {
            from project(':storm-api').components.java
            artifactId project(':storm-api').jar.archiveBaseName.get()
            pom {
                name = 'Zomboid Storm API'
                description = 'Project Zomboid Storm API'
                url = 'https://github.com/pzstorm/storm'
                scm {
                    connection = 'scm:git:git://github.com/pzstorm/storm.git'
                    developerConnection = 'scm:git:ssh://github.com:pzstorm/storm.git'
                    url = 'https://github.com/pzstorm/storm'
                }
                licenses {
                    license {
                        name = 'GNU General Public License v3.0'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.en.html'
                    }
                }
                developers {
                    developer {
                        id = 'yooksi'
                        name = 'Matthew Cain'
                        email = 'yooks@tuta.io'
                    }
                }
            }
        }
    }
}

signing {
    sign(publishing.publications.apiMavenJava, publishing.publications.coreMavenJava)
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}
